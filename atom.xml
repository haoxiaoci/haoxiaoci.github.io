<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>桃之夭夭</title>
  
  <subtitle>归来仍是少年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haoxiaoci.github.io/"/>
  <updated>2018-12-11T06:57:52.170Z</updated>
  <id>https://haoxiaoci.github.io/</id>
  
  <author>
    <name>haoxiaoci</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排序算法整理</title>
    <link href="https://haoxiaoci.github.io/archives/5124f222.html"/>
    <id>https://haoxiaoci.github.io/archives/5124f222.html</id>
    <published>2018-12-11T06:08:13.000Z</published>
    <updated>2018-12-11T06:57:52.170Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 11 2018 14:58:13 GMT+0800 (GMT+08:00) --><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>从第一个元素开始，跟他下一个元素比较，如果自己比较大，就跟相邻元素换一下，如果隔壁元素比较大，就不换了，继续比较隔壁元素和他的下一个元素的大小，遍历一遍就可以把列表中最大的值放在队尾，然后开始第二次遍历，知道n-1遍历，所有元素归位；</p><p>图示：<br><img src="https://upload-images.jianshu.io/upload_images/7770956-42d0a30d5520d0dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BubbleSort.png"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def BubbleSort(nums):</span><br><span class="line">    if len(nums) &gt;1:</span><br><span class="line">        for i in range(0, len(nums)):</span><br><span class="line">            for j in range(0, len(nums)-i-1):</span><br><span class="line">                if nums[j] &gt; nums[j+1]:</span><br><span class="line">                    nums[j+1], nums[j] = nums[j], nums[j+1]</span><br></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>最好的情况下是列表本来就是有序的虽然不用交换，但是遍历的次数依然不会少，依然是O(n^2)，最坏的情况下，每次都要交换；</p><p>交换操作是非常昂贵的，冒泡排序法每次都是一小步一小步的，交换很多次，所以冒泡排序法是所有排序方法中最低效的方法。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h3><p>冒泡排序的改进版，遍历一次就找到最大值，然后交换一次，不是每次比较都交换，第二次遍历就找到第二大的数字，并把它放到正确的位置<br>图示：<br><img src="https://upload-images.jianshu.io/upload_images/7770956-2bd996b076b37244.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="selectionSort.png"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def SelectionSort(nums):</span><br><span class="line">    length = len(nums)</span><br><span class="line">    for i in range(0, length):</span><br><span class="line">        index = 0</span><br><span class="line">        for j in range(0, length-i):</span><br><span class="line">            if nums[index] &lt; nums[j]:</span><br><span class="line">                index = j</span><br><span class="line">        nums[index],nums[length-i-1] = nums[length-i-1], nums[index]</span><br></pre></td></tr></table></figure><h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>选择排序和冒泡排序的循环遍历次数是一样的，但是交换次数明显少于冒泡排序，所以选择排序相比较于冒泡排序，执行更快一点；<br>最佳的情况下是列表原本就是有序列表，依然遍历O(n^2)次数，但是没有交换操作，这个也是可以优化的，当第一次发现列表是有序的时候就可以退出；</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h3><p>以第一个元素为例，对比比第一个元素大的，就插入到其左边，比他大就插入到右边<br>图示：<br><img src="https://upload-images.jianshu.io/upload_images/7770956-0491bc2310105e2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="InsertSort.png"><br>具体的排序过程插入操作一个元素的时候如下图，移动其他元素给目标元素空出位置，移位操作大概需要交换操作的三分之一的时间；<br><img src="https://upload-images.jianshu.io/upload_images/7770956-d2005472c731a3c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def SelectSort(a):</span><br><span class="line">    for i in range(len(a)):</span><br><span class="line">        min_index = i</span><br><span class="line">        for j in range(i, len(a)):</span><br><span class="line">            if a[min_index] &lt; a[j]:</span><br><span class="line">                min_index = j</span><br><span class="line">        a[min_index], a[i] = a[i], a[min_index]</span><br></pre></td></tr></table></figure><h3 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>最好的情况下是列表本来就是有序的，时间复杂度是O(n)<br>最差的情况下是需要比较n-1个整数的总和，时间复杂度是O(n^2),算法</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h3 id="算法思路-2"><a href="#算法思路-2" class="headerlink" title="算法思路"></a>算法思路</h3><p>递减递增排序， 根据增量i，循环列表将i的倍数的项拿出来组成子列表，对子列表进行排序，当增量i为1时，排序操作就是插入排序，当增量不为1时，相比较来说，希尔排序移位的次数小于插入排序<br>图解：增量i为3<br><img src="https://upload-images.jianshu.io/upload_images/7770956-1e3f9055f0b5180f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="shellsort.png"></p><p>每个子列表排序：<br><img src="https://upload-images.jianshu.io/upload_images/7770956-4e4b8ab0deb80603.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="shellsort2.png"></p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def ShellSort(a):</span><br><span class="line">    h = 1</span><br><span class="line">    while(h &lt; len(a)/3):</span><br><span class="line">        h = 3*h +1</span><br><span class="line">    print(&quot;h: %d&quot; % h)</span><br><span class="line">    while h &gt;=1:</span><br><span class="line">        for i in range(len(a)):</span><br><span class="line">            j = i</span><br><span class="line">            while j in range(1, i+1) and a[j] &lt; a[j-h]:</span><br><span class="line">                a[j], a[j-h] = a[j-h], a[j]</span><br><span class="line">                j -=h</span><br><span class="line">        h = h//3</span><br></pre></td></tr></table></figure><p>关于h为什么使用递增序列（截图来自算法第四版）：<br><img src="https://upload-images.jianshu.io/upload_images/7770956-5169c93bd31c48f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>希尔排序也可以用在大型数组，对于任意排序（不一定是随机的）的数组表现的也很好，相比于选择排序和插入排序，数组越大，希尔排序的优势越明显，使用sortcompare比较其性能，希尔排序能够解决一些初级算法无能为力的问题，这个例子也是说明了：通过提升速度来解决其他方式无法解决的问题是研究算法的设计和性能的主要原因之一</p><h3 id="时间复杂度："><a href="#时间复杂度：" class="headerlink" title="时间复杂度："></a>时间复杂度：</h3><p>乍一看，你可能认为希尔排序不会比插入排序更好，因为它最后一步执行了完整的插入排 序。 然而，结果是，该最终插入排序不需要进行非常多的比较（或移位），因为如上所述， 该列表已经被较早的增量插入排序预排序。 换句话说，每个遍历产生比前一个“更有序”的列 表。 这使得最终遍历非常有效。</p><p>希尔排序的时间复杂度倾向于落在O(n)和O(n^2)之间的某处，基于以上所描述的行为。对于 Listing 5中显示的增量，性能为 O(n^2) 。<br>通过改变增量，例如使用 2^k-1（1,3,7,15,31等等） ，希尔排序可以在 O(n )处执行。</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="算法思路-3"><a href="#算法思路-3" class="headerlink" title="算法思路"></a>算法思路</h3><p>使用分而治之策略，属于一种递归算法，当列表有多项时，我们对列表递归分割操作，直到拆分成最小的单位，每个列表只有一项，然后再比较排序，排序完后向上递归合并，直到合并成完整列表。<br>当列表为空或列表大小为1时，不需要排序。<br>列表大小是奇数或者偶数不影响排序，就相差一个元素。</p><p>第一步：元素拆分<br><img src="https://upload-images.jianshu.io/upload_images/7770956-0dfa0762735bfba6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>第二步：排序合并<br><img src="https://upload-images.jianshu.io/upload_images/7770956-27207d9b79be8f9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mergesort2.png"></p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><p>自顶向下的归并排序<br>实现1<br>这种写法，算是对于原地的写法吧，但是其中用到了数组的分片，我觉得也是需要额外的空间的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">def mergeSort(nums):</span><br><span class="line">    import pdb;pdb.set_trace()</span><br><span class="line">    print(&apos;splitting&apos;, nums)</span><br><span class="line">    if len(nums) &gt; 1:</span><br><span class="line">        mid = len(nums) //2</span><br><span class="line">        left = nums[:mid]</span><br><span class="line">        right = nums[mid:]</span><br><span class="line">        </span><br><span class="line">        mergeSort(left)</span><br><span class="line">        mergeSort(right)</span><br><span class="line"></span><br><span class="line">        i = 0</span><br><span class="line">        j = 0</span><br><span class="line">        k = 0</span><br><span class="line">        #下边这段while是主要交换数据的，举例：</span><br><span class="line">        #left = 26, 54 right=17, 93, nums=[54, 26, 93 ,17]</span><br><span class="line">        #经过下边这段while会在 nums = [17, 26, 54, 17]的时候跳出循环，因为最后一个数字是还没写上的</span><br><span class="line">        #所以需要下边两个循环，将最后一个数字补上。。。递归真的绕晕</span><br><span class="line">        while i &lt; len(left) and j &lt; len(right):</span><br><span class="line">            if left[i] &lt; right[j]:</span><br><span class="line">                nums[k] = left[i]</span><br><span class="line">                i += 1</span><br><span class="line">            else:</span><br><span class="line">                nums[k] = right[j]</span><br><span class="line">                j +=1</span><br><span class="line">            k +=1</span><br><span class="line">        print(&apos;1i: %d, j: %d, k: %d&apos; %(i, j, k))</span><br><span class="line"></span><br><span class="line">        while i &lt; len(left):</span><br><span class="line">            nums[k] = left[i]</span><br><span class="line">            i += 1</span><br><span class="line">            k += 1</span><br><span class="line">        print(&apos;2i: %d, j: %d, k: %d&apos; %(i, j, k))</span><br><span class="line">        while j &lt; len(right):</span><br><span class="line">            nums[k] = right[j]</span><br><span class="line">            j +=1</span><br><span class="line">            k +=2</span><br><span class="line">        print(&apos;3i: %d, j: %d, k: %d&apos; %(i, j, k))</span><br><span class="line">    print(&quot;Merging&quot;, nums)</span><br><span class="line"></span><br><span class="line">nums=[54, 26, 93, 17, 77, 31, 44, 55, 20]</span><br><span class="line">mergeSort(nums)</span><br><span class="line">print(nums)</span><br></pre></td></tr></table></figure><p>实现2<br>这种写法，多出了一个字典专门用来存储其中的数组变量的；<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">def LocalSort(a, low, mid, high):</span><br><span class="line">    i = low</span><br><span class="line">    j = mid +1</span><br><span class="line">    aux = &#123;&#125;</span><br><span class="line">    for k in range(low, high+1):</span><br><span class="line">        aux[k] = a[k]</span><br><span class="line"></span><br><span class="line">    k = low</span><br><span class="line">    while k in range(low, high+1):</span><br><span class="line">        if i &gt; mid:</span><br><span class="line">            a[k] = aux[j]</span><br><span class="line">            j +=1</span><br><span class="line">            print(&quot;i: %d&quot; %i)</span><br><span class="line">            print(&quot;a: &quot;, a[:k+1])</span><br><span class="line">        elif j &gt; high:</span><br><span class="line">            a[k] = aux[i]</span><br><span class="line">            i +=1</span><br><span class="line">            print(&quot;j: %d&quot; %j)</span><br><span class="line">            print(&quot;a: &quot;, a[:k+1])</span><br><span class="line">        elif aux[j] &lt; aux[i]:</span><br><span class="line">            a[k] = aux[j]</span><br><span class="line">            j +=1</span><br><span class="line">            print(&quot;j: %d&quot; %j)</span><br><span class="line">            print(&quot;a: &quot;, a[:k+1])</span><br><span class="line">        else:</span><br><span class="line">            a[k] = aux[i]</span><br><span class="line">            i +=1</span><br><span class="line">            print(&quot;i: %d&quot; %i)</span><br><span class="line">            print(&quot;a: &quot;, a[:k+1])</span><br><span class="line">        k +=1</span><br><span class="line"></span><br><span class="line">def MergeSort2(a, low, high):</span><br><span class="line">    if high &lt;= low:</span><br><span class="line">        return</span><br><span class="line">    mid = low + (high-low)//2</span><br><span class="line">    print(&quot;low: %d, mid: %d, high: %d&quot;%(low, mid, high))</span><br><span class="line">    MergeSort2(a, low, mid)</span><br><span class="line">    MergeSort2(a, mid+1, high)</span><br><span class="line">    print(&quot;a: &quot;, a[low:high+1])</span><br><span class="line">    LocalSort(a, low, mid, high)</span><br><span class="line"></span><br><span class="line">a = [8,4,9,1,2,5,0,19,33]</span><br><span class="line">length = len(a)</span><br><span class="line">MergeSort2(a, 0, length -1)</span><br></pre></td></tr></table></figure><p></p><p>自底向上的归并排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def MergeSortBU(a):</span><br><span class="line">    length = len(a)</span><br><span class="line">    aux = []</span><br><span class="line">    i = 1</span><br><span class="line">    while i &lt; length:</span><br><span class="line">        low = 0</span><br><span class="line">        while low &lt; length - i:</span><br><span class="line">            LocalSort(a, low, low+i-1, min(low+i+i-1, length-1))</span><br><span class="line">            low = low +i +i</span><br><span class="line">        i +=i</span><br><span class="line">LocalSort()函数参考上一段代码</span><br></pre></td></tr></table></figure><p>自底向上这个算法轨迹：<br>因为我没看太懂这个算法，留着这个图，以后再看再理解<br><img src="https://upload-images.jianshu.io/upload_images/7770956-f8501bffd71cdbd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="时间复杂度-3"><a href="#时间复杂度-3" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>O(nlogn), 拆分列表的时候需要O(logn),合并的时候是需要循环整个列表的需要O(n)，所以总的时间复杂度是O(nlogn),代码1中的切片的时间复杂度O(k)可以后续优化，而且因为是切片操作，切出来的列表需要占用额外的空间，当列表很大时，这里也是一个问题.在代码2和代码3中就不存在这个问题啦，啊哈哈哈~</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="算法思路-4"><a href="#算法思路-4" class="headerlink" title="算法思路"></a>算法思路</h3><p>选择列表的一个数作为基准值base，设置指针，一个从左到右left，一个从右到左的right，当left的值大于时，left停下，当right小于base时停下，交换left和right，<br>最终知道left和right相遇，对比base的值，base和其中比base小的值交换，这样循环一遍基准值base一定归位，左边全是比base小的，右边全是比base大的，下一次再循环基准值的左半边，和基准值的右半边；<br>当列表长度小于1时，认为他是有序的，不需要排序</p><p>图示：<br><img src="https://upload-images.jianshu.io/upload_images/7770956-026a1379222f2f19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="quicksort.png"></p><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">def quickSort(nums):</span><br><span class="line">    quickSortHelper(nums, 0, len(nums)-1)</span><br><span class="line"></span><br><span class="line">def quickSortHelper(nums, first, last):</span><br><span class="line">    #M = 15   当数组元素个数小于15时，改用插入排序，因为插入排序在这时更快</span><br><span class="line">    #if last &lt;= (first + M):</span><br><span class="line">    #    InserSort(nums)</span><br><span class="line">    #    return</span><br><span class="line">    if last &lt;= first:</span><br><span class="line">        return</span><br><span class="line">    split = partition(nums, first, last)</span><br><span class="line">    quickSortHelper(nums, first, split - 1)</span><br><span class="line">    quickSortHelper(nums, split+1, last)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def partition(nums, first, last):</span><br><span class="line">    #import pdb;pdb.set_trace()</span><br><span class="line">    base = nums[first]</span><br><span class="line">    print(&apos;base: %d&apos; % base)</span><br><span class="line">    left = first + 1</span><br><span class="line">    right = last</span><br><span class="line">    done = False</span><br><span class="line">    while not done:</span><br><span class="line">        while left &lt;= right and nums[left] &lt;= base:</span><br><span class="line">            left +=1</span><br><span class="line">        while right &gt;= left and nums[right] &gt;= base:</span><br><span class="line">            right -=1</span><br><span class="line">        if left &gt; right:</span><br><span class="line">            done = True</span><br><span class="line">        else:</span><br><span class="line">            nums[left], nums[right] = nums[right], nums[left]  ##左边数字大，右边数字小，两种情况</span><br><span class="line">    nums[right], nums[first] = nums[first], nums[right]  #为什么是right, 因为left还是比base大，但是right是第一个比base小的数</span><br><span class="line">    print(&apos;nums&apos;, nums)</span><br><span class="line">    return right</span><br><span class="line">    </span><br><span class="line">nums = [54,26,93,17,77,31,44,55,20]</span><br><span class="line">quickSort(nums)</span><br><span class="line">print(nums)</span><br></pre></td></tr></table></figure><h3 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h3><ol><li>对于小数组，快速排序和插入排序对比，还是插入排序更快，多小算小呢，5-15之间，代码修改在上边注释中可以看到，当数组长度小于常数15时，会调用插入排序算法</li></ol><ol start="2"><li>在实际应用中可能排序的数组中存在着大量重复的元素，有很多重复的元素对于快速排序来说是有优化的空间的：</li></ol><p>三项切分的快速排序算法代码：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def Quick3way(a, low, high):</span><br><span class="line">    if high &lt;= low:</span><br><span class="line">        return</span><br><span class="line">    lt = low </span><br><span class="line">    i = low +1</span><br><span class="line">    gt = high</span><br><span class="line">    base = a[low]</span><br><span class="line">    while i &lt;= gt:</span><br><span class="line">        if a[i] &lt; base:</span><br><span class="line">            a[i], a[lt] = a[lt], a[i]</span><br><span class="line">            i +=1</span><br><span class="line">            lt +=1</span><br><span class="line">        elif a[i] &gt; base:</span><br><span class="line">            a[i], a[gt] = a[gt], a[i]</span><br><span class="line">            gt -=1</span><br><span class="line">        else:</span><br><span class="line">            i+=1</span><br><span class="line">    Quick3way(a, low, lt-1)</span><br><span class="line">    Quick3way(a, gt +1, high)</span><br></pre></td></tr></table></figure><p></p><p>有点难理解,来点解释和图：<br><img src="https://upload-images.jianshu.io/upload_images/7770956-1984e9f9eefb4281.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/7770956-93696c00057d481f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="时间复杂度-4"><a href="#时间复杂度-4" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>最好的情况下，第一个元素作为base，拆分列表就刚好从中间对半对半的拆开，时间复杂度是O(logn), 拆分完在遍历交换元素的时候，是要遍历整个列表的，需要时间复杂度O(n)<br>最差的情况下,列表就是有序的列表，第一个元素作为base，每次检查一遍发现自己是正确的元素，左半边是空的元素全在有半边，这时的时间复杂度O(n^2)</p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>使用满二叉树构造出一个二叉堆，堆排序是使用最大堆，最小堆，来解决数据中删除最大或最小的元素，插入一个元素，做完这些操作后堆经过排序，队列仍是有序的，当数据量较多时，也可以解决从数据中查找第k大元素，在以上这些使用场景堆排序很占优势</p><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def HeapSort(a):</span><br><span class="line">    length = len(a)//2  - 1</span><br><span class="line">    for i in range(length, -1, -1):</span><br><span class="line">        sink(a, i, len(a) -1)</span><br><span class="line">     </span><br><span class="line">    for j in range(len(a)-1, 0, -1):</span><br><span class="line">        a[0] ,a[j] = a[j], a[0]</span><br><span class="line">        sink(a, 0, j - 1)</span><br><span class="line"></span><br><span class="line">def sink(a, k, N):</span><br><span class="line">    j = 2*k</span><br><span class="line">    while j &lt;= N:</span><br><span class="line">        if j &lt; N and a[j] &lt; a[j+1]:</span><br><span class="line">            j +=1</span><br><span class="line">        elif a[k] &lt; a[j]:</span><br><span class="line">            a[k], a[j] = a[j], a[k]</span><br><span class="line">            k = j</span><br><span class="line">            print(&quot;a: &quot;, a)</span><br><span class="line">        else:</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><h3 id="时间复杂度-5"><a href="#时间复杂度-5" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>堆排序算法的时间复杂度是O(nlogn)</p><h2 id="如何比较两个算法："><a href="#如何比较两个算法：" class="headerlink" title="如何比较两个算法："></a>如何比较两个算法：</h2><ol><li>实现并调试</li><li>分析算法的基本性质</li><li>对其相对性能做出猜想</li><li>用实验验证猜想<br>待补充。。。</li></ol><h2 id="算法对比："><a href="#算法对比：" class="headerlink" title="算法对比："></a>算法对比：</h2><p><img src="https://upload-images.jianshu.io/upload_images/7770956-bb3a8996b2d3662d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 11 2018 14:58:13 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h1&gt;&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://haoxiaoci.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>ceph梳理</title>
    <link href="https://haoxiaoci.github.io/archives/c7ad3fcb.html"/>
    <id>https://haoxiaoci.github.io/archives/c7ad3fcb.html</id>
    <published>2018-07-28T04:04:37.000Z</published>
    <updated>2018-11-29T08:01:14.432Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 11 2018 14:52:57 GMT+0800 (GMT+08:00) --><h2 id="一、数据寻址过程"><a href="#一、数据寻址过程" class="headerlink" title="一、数据寻址过程"></a>一、数据寻址过程</h2><h3 id="1-file-gt-object"><a href="#1-file-gt-object" class="headerlink" title="1.file -&gt;object"></a>1.file -&gt;object</h3><p>将大小不统一的file 切成均匀的小块并给每个小块加标记，方便后续的处理<br>ino(inode number的缩写，意思是file的id) + non(object number的缩写，是这个file切分产生的序列号) = oid（object id）<br>举例：<br>ino = filename 这个file被切成了3个object，object的序号依次为0，1,2<br>最终oid的序号： filename0 filename1 filename2<br>期间要保证ino的唯一性，否则重复了，后边的映射就无法进行了。</p><h3 id="2-Object-gt-PG"><a href="#2-Object-gt-PG" class="headerlink" title="2. Object -&gt; PG"></a>2. Object -&gt; PG</h3><p>假设pg的总数为m个（m应该是2的整数幂），算法最终的目的是将多个object近似均匀的映射到pg中；<br>object映射到哪个pg？计算公式如下：<br>hash(oid) &amp; mask -&gt;pgid<br>算法字面解释：<br>ceph指定一个静态哈希函数，计算oid的哈希值，将oid映射成为一个近似均匀分布的伪随机值，将这个伪随机值与mask值按位相与，最终得到pg的序号（pgid）<br>什么这么算：<br>根据RADOS的设计，给定PG的总数为m（m应该为2的整数幂），则mask的值为m-1。因此，哈希值计算和按位与操作的整体结果事实上是从所有m个PG中近似均匀地随机选择一个。基于这一机制，当有大量object和大量PG时，RADOS能够保证object和PG之间的近似均匀映射。又因为object是由file切分而来，大部分object的size相同，因而，这一映射最终保证了，各个PG中存储的object的总数据量近似均匀。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 11 2018 14:52:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;一、数据寻址过程&quot;&gt;&lt;a href=&quot;#一、数据寻址过程&quot; class=&quot;headerlink&quot; title=&quot;一、数据寻址过程&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="技术" scheme="https://haoxiaoci.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
